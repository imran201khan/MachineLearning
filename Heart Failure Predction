{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/imran201khan/MachineLearning/blob/main/Heart%20Failure%20Predction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "BevEgP0_H5mJ"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import plotly.express as px"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Fk2uN92jH5mW"
      },
      "outputs": [],
      "source": [
        "df=pd.read_csv(\"/content/heart.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "OplmlxZPH5mZ",
        "outputId": "6c87467a-7055-40f4-f86d-b08a0c1524a4"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-54633588-603c-4f13-b807-f5f1b7bd043d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Sex</th>\n",
              "      <th>ChestPainType</th>\n",
              "      <th>RestingBP</th>\n",
              "      <th>Cholesterol</th>\n",
              "      <th>FastingBS</th>\n",
              "      <th>RestingECG</th>\n",
              "      <th>MaxHR</th>\n",
              "      <th>ExerciseAngina</th>\n",
              "      <th>Oldpeak</th>\n",
              "      <th>ST_Slope</th>\n",
              "      <th>HeartDisease</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>40</td>\n",
              "      <td>M</td>\n",
              "      <td>ATA</td>\n",
              "      <td>140</td>\n",
              "      <td>289</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>172</td>\n",
              "      <td>N</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Up</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>49</td>\n",
              "      <td>F</td>\n",
              "      <td>NAP</td>\n",
              "      <td>160</td>\n",
              "      <td>180</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>156</td>\n",
              "      <td>N</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Flat</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>37</td>\n",
              "      <td>M</td>\n",
              "      <td>ATA</td>\n",
              "      <td>130</td>\n",
              "      <td>283</td>\n",
              "      <td>0</td>\n",
              "      <td>ST</td>\n",
              "      <td>98</td>\n",
              "      <td>N</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Up</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>48</td>\n",
              "      <td>F</td>\n",
              "      <td>ASY</td>\n",
              "      <td>138</td>\n",
              "      <td>214</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>108</td>\n",
              "      <td>Y</td>\n",
              "      <td>1.5</td>\n",
              "      <td>Flat</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>54</td>\n",
              "      <td>M</td>\n",
              "      <td>NAP</td>\n",
              "      <td>150</td>\n",
              "      <td>195</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>122</td>\n",
              "      <td>N</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Up</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-54633588-603c-4f13-b807-f5f1b7bd043d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-54633588-603c-4f13-b807-f5f1b7bd043d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-54633588-603c-4f13-b807-f5f1b7bd043d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   Age Sex ChestPainType  RestingBP  Cholesterol  FastingBS RestingECG  MaxHR  \\\n",
              "0   40   M           ATA        140          289          0     Normal    172   \n",
              "1   49   F           NAP        160          180          0     Normal    156   \n",
              "2   37   M           ATA        130          283          0         ST     98   \n",
              "3   48   F           ASY        138          214          0     Normal    108   \n",
              "4   54   M           NAP        150          195          0     Normal    122   \n",
              "\n",
              "  ExerciseAngina  Oldpeak ST_Slope  HeartDisease  \n",
              "0              N      0.0       Up             0  \n",
              "1              N      1.0     Flat             1  \n",
              "2              N      0.0       Up             0  \n",
              "3              Y      1.5     Flat             1  \n",
              "4              N      0.0       Up             0  "
            ]
          },
          "execution_count": 47,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NwtK7MDUH5md"
      },
      "source": [
        "# **1.Data Size?**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8IJrkOIzH5mh",
        "outputId": "b63814f9-3dbc-41ac-b5f1-6cc428945289"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(918, 12)"
            ]
          },
          "execution_count": 48,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n5duF6_vH5mj"
      },
      "source": [
        "# **2.How Data Looks Like?**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ll8ewmSQH5ml",
        "outputId": "503b3f61-c163-4665-ad64-bb6d4db571fc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 918 entries, 0 to 917\n",
            "Data columns (total 12 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   Age             918 non-null    int64  \n",
            " 1   Sex             918 non-null    object \n",
            " 2   ChestPainType   918 non-null    object \n",
            " 3   RestingBP       918 non-null    int64  \n",
            " 4   Cholesterol     918 non-null    int64  \n",
            " 5   FastingBS       918 non-null    int64  \n",
            " 6   RestingECG      918 non-null    object \n",
            " 7   MaxHR           918 non-null    int64  \n",
            " 8   ExerciseAngina  918 non-null    object \n",
            " 9   Oldpeak         918 non-null    float64\n",
            " 10  ST_Slope        918 non-null    object \n",
            " 11  HeartDisease    918 non-null    int64  \n",
            "dtypes: float64(1), int64(6), object(5)\n",
            "memory usage: 86.2+ KB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FRMWaWAWH5mo"
      },
      "source": [
        "# **3.Having Duplicate values?**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dt_4PxzJH5mr",
        "outputId": "40be0488-db70-4945-a894-d624f75dfa2b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "execution_count": 50,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.duplicated().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pqVeKkEGH5mu"
      },
      "source": [
        "# **4.Having Null Values?**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "mlIGKiDRH5mw",
        "outputId": "18677435-f24a-4bf4-a6f8-3080130ec793"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Age               0\n",
              "Sex               0\n",
              "ChestPainType     0\n",
              "RestingBP         0\n",
              "Cholesterol       0\n",
              "FastingBS         0\n",
              "RestingECG        0\n",
              "MaxHR             0\n",
              "ExerciseAngina    0\n",
              "Oldpeak           0\n",
              "ST_Slope          0\n",
              "HeartDisease      0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3PTQGTqNH5mx"
      },
      "source": [
        "# **5.Described Data?**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "LgWpKw4pH5mz",
        "outputId": "d89fe7f9-380f-4226-d2be-50cbe7510a63"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-f6f4bfcb-ad98-4f91-90b0-fb8a40329694\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>RestingBP</th>\n",
              "      <th>Cholesterol</th>\n",
              "      <th>FastingBS</th>\n",
              "      <th>MaxHR</th>\n",
              "      <th>Oldpeak</th>\n",
              "      <th>HeartDisease</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>918.000000</td>\n",
              "      <td>918.000000</td>\n",
              "      <td>918.000000</td>\n",
              "      <td>918.000000</td>\n",
              "      <td>918.000000</td>\n",
              "      <td>918.000000</td>\n",
              "      <td>918.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>53.510893</td>\n",
              "      <td>132.396514</td>\n",
              "      <td>198.799564</td>\n",
              "      <td>0.233115</td>\n",
              "      <td>136.809368</td>\n",
              "      <td>0.887364</td>\n",
              "      <td>0.553377</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>9.432617</td>\n",
              "      <td>18.514154</td>\n",
              "      <td>109.384145</td>\n",
              "      <td>0.423046</td>\n",
              "      <td>25.460334</td>\n",
              "      <td>1.066570</td>\n",
              "      <td>0.497414</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>28.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>60.000000</td>\n",
              "      <td>-2.600000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>47.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>173.250000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>54.000000</td>\n",
              "      <td>130.000000</td>\n",
              "      <td>223.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>138.000000</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>60.000000</td>\n",
              "      <td>140.000000</td>\n",
              "      <td>267.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>156.000000</td>\n",
              "      <td>1.500000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>77.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>603.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>202.000000</td>\n",
              "      <td>6.200000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f6f4bfcb-ad98-4f91-90b0-fb8a40329694')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f6f4bfcb-ad98-4f91-90b0-fb8a40329694 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f6f4bfcb-ad98-4f91-90b0-fb8a40329694');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "              Age   RestingBP  Cholesterol   FastingBS       MaxHR  \\\n",
              "count  918.000000  918.000000   918.000000  918.000000  918.000000   \n",
              "mean    53.510893  132.396514   198.799564    0.233115  136.809368   \n",
              "std      9.432617   18.514154   109.384145    0.423046   25.460334   \n",
              "min     28.000000    0.000000     0.000000    0.000000   60.000000   \n",
              "25%     47.000000  120.000000   173.250000    0.000000  120.000000   \n",
              "50%     54.000000  130.000000   223.000000    0.000000  138.000000   \n",
              "75%     60.000000  140.000000   267.000000    0.000000  156.000000   \n",
              "max     77.000000  200.000000   603.000000    1.000000  202.000000   \n",
              "\n",
              "          Oldpeak  HeartDisease  \n",
              "count  918.000000    918.000000  \n",
              "mean     0.887364      0.553377  \n",
              "std      1.066570      0.497414  \n",
              "min     -2.600000      0.000000  \n",
              "25%      0.000000      0.000000  \n",
              "50%      0.600000      1.000000  \n",
              "75%      1.500000      1.000000  \n",
              "max      6.200000      1.000000  "
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "55LJT0rZH5m0"
      },
      "source": [
        "# **6.Apply EDA**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 495
        },
        "id": "ZUEuPWQNH5m1",
        "outputId": "96a4b457-cc76-4e3a-b84c-9e366b81dfd1"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7faad7df83d0>"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x432 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#Age is normaly distributed\n",
        "plt.figure(figsize=(16,6))\n",
        "\n",
        "sns.distplot(df['Age'],hist=False,color='red')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "um9__ADkH5m3",
        "outputId": "1556c8e1-7aab-415a-a5c8-74af828af75a"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n",
            "  warnings.warn(msg, FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7faad7de67d0>"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 1152x432 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#normaly distributed by Sex\n",
        "plt.figure(figsize=(16,6))\n",
        "sns.distplot(df[df['Sex']=='M']['Age'],hist=False,color='red')\n",
        "sns.distplot(df[df['Sex']=='F']['Age'],hist=False,color='black')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 495
        },
        "id": "qnNZyFlmH5m4",
        "outputId": "b8abdd67-c40f-4728-9ffc-493853591665"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7faad778ce50>"
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x432 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#Aproxx 79% is male and 21 % is female\n",
        "plt.figure(figsize=(16,6))\n",
        "plt.subplot(1,2,1)\n",
        "sns.countplot(df['Sex'])\n",
        "plt.subplot(1,2,2)\n",
        "df['Sex'].value_counts().plot(kind='pie',autopct=\"%.2f\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 495
        },
        "id": "4hY05CiAO6nx",
        "outputId": "46acd3aa-ed61-4ed1-bf4d-55443512227f"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7faad7ce6ad0>"
            ]
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x432 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(16,6))\n",
        "plt.subplot(1,2,1)\n",
        "sns.countplot(df['ChestPainType'])\n",
        "plt.subplot(1,2,2)\n",
        "df['ChestPainType'].value_counts().plot(kind='pie',autopct=\"%.2f\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 495
        },
        "id": "e-KaezKmTPZk",
        "outputId": "6e5b9ee7-7162-45db-fda0-b1147afcb982"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7faad76ab190>"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x432 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(16,6))\n",
        "plt.subplot(1,2,1)\n",
        "sns.countplot(df['FastingBS'])\n",
        "plt.subplot(1,2,2)\n",
        "df['FastingBS'].value_counts().plot(kind='pie',autopct=\"%.2f\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 495
        },
        "id": "r9RmMonMTW_4",
        "outputId": "3d02cbc1-65c6-48d0-8faf-b022f16d444e"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7faad75d4410>"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x432 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(16,6))\n",
        "plt.subplot(1,2,1)\n",
        "sns.countplot(df['ExerciseAngina'])\n",
        "plt.subplot(1,2,2)\n",
        "df['ExerciseAngina'].value_counts().plot(kind='pie',autopct=\"%.2f\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 496
        },
        "id": "KOdPg5qlTeiJ",
        "outputId": "8dfb1c5c-71bb-4d4a-db20-689d2e882942"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7faad75037d0>"
            ]
          },
          "execution_count": 15,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x432 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(16,6))\n",
        "plt.subplot(1,2,1)\n",
        "sns.countplot(df['ST_Slope'])\n",
        "plt.subplot(1,2,2)\n",
        "df['ST_Slope'].value_counts().plot(kind='pie',autopct=\"%.2f\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "kducouNqO4wN",
        "outputId": "cc5e41ad-dec8-404b-cdce-3b3c3e287f17"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['Age', 'Sex', 'ChestPainType', 'RestingBP', 'Cholesterol', 'FastingBS',\n",
              "       'RestingECG', 'MaxHR', 'ExerciseAngina', 'Oldpeak', 'ST_Slope',\n",
              "       'HeartDisease'],\n",
              "      dtype='object')"
            ]
          },
          "execution_count": 16,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 495
        },
        "id": "dpniLzQhH5m6",
        "outputId": "d15596d8-c802-4ab1-f62a-918eb4ab94d4"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7faad7431bd0>"
            ]
          },
          "execution_count": 17,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x432 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#54% people have ASY type chest pain\n",
        "#male is more comparison to female \n",
        "plt.figure(figsize=(16,6))\n",
        "plt.subplot(1,2,1)\n",
        "sns.countplot(df['ChestPainType'])\n",
        "plt.subplot(1,2,2)\n",
        "df['ChestPainType'].value_counts().plot(kind='pie',autopct='%.2f')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 495
        },
        "id": "t6oPGwN3H5m8",
        "outputId": "09edee80-99bd-4547-bfe3-bfa8a3a968b6"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7faad7375410>"
            ]
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x432 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#76%people not have FastingBs\n",
        "plt.figure(figsize=(16,6))\n",
        "plt.subplot(1,2,1)\n",
        "sns.countplot(df['FastingBS'],hue=df['ChestPainType'])\n",
        "plt.subplot(1,2,2)\n",
        "df['FastingBS'].value_counts().plot(kind='pie',autopct=\"%.2f\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "vgT0PXzDXync",
        "outputId": "0b6a04f6-7060-4b92-bd5e-6e9b9fa9144d"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"0b826b23-a457-4b8e-a1a3-94c69089cc1d\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"0b826b23-a457-4b8e-a1a3-94c69089cc1d\")) {                    Plotly.newPlot(                        \"0b826b23-a457-4b8e-a1a3-94c69089cc1d\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Sex=M<br>HeartDisease=%{x}<br>Age=%{y}<extra></extra>\",\"legendgroup\":\"M\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"M\",\"offsetgroup\":\"M\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[0,0,0,0,0,1,1,0,1,1,1,1,0,1,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,0,0,0,1,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,1,0,0,1,0,1,1,1,1,0,0,1,1,0,0,0,0,1,0,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,1,1,0,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1,1,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,1,0,1,0,1,0,0,1,1,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1,0,1,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,1,0,0,1,0,0,1,0,1,1,1,1,0,1,1,0,0,0,1,0,1,1,0,1,0,0,1,1,1,0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,0,0,1,1,1,1,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,1,0,1,1,0,1,1,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,0,1,1,1,1,1,0,1,0,0,0,1,1,0,1,1,0,1,0,0,0,1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,1,1,1,0,1,1,1,1,0],\"xaxis\":\"x\",\"y\":[40,37,54,39,54,37,58,39,49,38,60,36,44,44,40,36,53,52,51,53,56,54,41,32,65,35,52,43,59,37,50,36,41,50,45,31,58,54,52,49,45,46,32,52,44,57,44,52,55,46,32,52,49,55,54,63,52,56,66,65,43,55,39,48,58,43,39,56,41,65,51,40,46,57,34,50,39,57,47,38,38,34,46,58,54,42,38,46,56,56,49,39,54,43,52,50,47,53,39,42,50,54,39,48,40,55,41,56,38,49,44,54,59,49,47,42,46,50,48,58,58,29,40,53,49,52,43,54,59,37,52,51,52,46,58,58,41,53,46,50,48,45,49,42,53,47,46,42,56,50,35,35,28,54,48,56,47,39,54,55,29,46,33,55,50,53,38,41,37,40,41,39,41,55,48,48,55,54,55,48,54,54,48,45,49,44,48,61,62,55,36,46,46,59,47,54,52,34,54,45,55,55,59,51,52,60,49,42,59,53,36,48,53,65,32,61,50,57,51,47,60,55,53,51,55,53,58,57,65,60,41,34,53,74,57,56,61,68,59,63,62,46,42,45,59,52,60,60,56,38,40,51,62,72,63,63,43,64,61,52,51,69,59,48,69,36,53,43,56,58,55,67,46,53,38,53,62,47,56,56,56,61,68,57,63,60,66,63,59,61,47,65,70,50,60,50,43,54,61,42,53,55,61,51,70,61,38,57,38,58,52,61,51,65,52,47,35,57,62,59,53,62,54,56,56,54,63,44,60,55,66,66,65,60,60,60,56,59,62,63,57,62,63,46,63,60,58,64,63,74,52,69,51,60,56,55,54,77,63,55,52,64,60,60,58,59,61,40,61,41,57,63,59,51,59,42,55,62,56,53,68,53,60,62,59,51,61,57,56,58,69,67,58,65,63,55,57,65,54,72,75,49,51,60,58,61,67,62,65,63,69,51,62,55,75,40,67,58,60,63,35,62,43,63,68,65,48,63,64,61,50,59,55,45,65,61,49,72,50,64,55,63,59,56,62,74,54,57,62,76,70,48,48,61,66,68,55,62,71,74,53,58,75,56,58,64,54,54,59,55,57,61,41,71,38,55,56,69,64,72,69,56,62,67,57,69,51,48,69,69,64,57,53,37,67,74,63,58,61,64,58,60,57,55,55,56,57,61,61,74,68,62,53,62,46,62,55,58,62,70,57,64,65,56,59,60,59,53,44,61,46,53,64,40,67,48,43,47,58,57,66,59,50,48,61,59,42,48,40,44,46,59,58,49,44,66,42,52,61,62,57,44,63,57,51,47,61,70,45,45,56,58,35,58,41,57,42,62,59,50,59,54,54,52,47,66,58,67,57,63,48,51,59,41,42,46,56,49,54,57,54,62,52,60,66,42,64,54,56,57,64,59,50,51,54,53,52,40,58,41,55,45,56,38,55,58,43,53,65,69,69,67,34,51,46,67,50,42,41,53,43,56,52,70,54,70,54,35,48,77,68,58,60,51,55,52,58,64,37,59,51,58,29,51,54,44,54,65,57,63,41,52,39,45,52,62,43,47,52,68,39,60,65,60,60,54,44,44,51,59,61,55,64,43,60,58,49,48,52,44,57,67,52,43,52,59,64,57,57,47,35,61,58,58,56,56,67,44,63,41,59,45,68,57,38],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Sex=F<br>HeartDisease=%{x}<br>Age=%{y}<extra></extra>\",\"legendgroup\":\"F\",\"marker\":{\"color\":\"#EF553B\",\"pattern\":{\"shape\":\"\"}},\"name\":\"F\",\"offsetgroup\":\"F\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1],\"xaxis\":\"x\",\"y\":[49,48,45,48,37,42,54,43,43,49,53,43,41,48,48,54,54,47,41,52,51,43,50,37,45,44,35,53,49,52,39,40,48,59,49,33,59,35,47,52,58,34,48,54,61,43,56,43,52,46,54,50,41,62,57,31,50,56,30,51,48,37,38,54,43,53,55,51,55,54,47,32,45,57,54,51,55,51,48,47,62,51,38,64,64,73,38,62,50,66,63,64,54,61,51,54,67,74,63,57,71,54,48,46,51,71,37,62,65,65,63,45,41,60,59,51,60,58,44,57,76,67,39,42,41,61,64,50,44,49,60,45,55,60,54,49,56,66,65,54,52,63,46,67,34,41,50,54,64,51,46,66,62,64,50,45,68,62,56,42,62,55,58,54,69,60,43,41,63,35,62,43,58,61,62,53,53,62,51,65,71,58,56,53,66,39,58,55,58,55,63,57,57],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"HeartDisease\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Age\"}},\"legend\":{\"title\":{\"text\":\"Sex\"},\"tracegroupgap\":0},\"margin\":{\"t\":60},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('0b826b23-a457-4b8e-a1a3-94c69089cc1d');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig=px.bar(df,'HeartDisease','Age',color='Sex')\n",
        "fig.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "sm8T8Z5gH5m-",
        "outputId": "1d0005ee-5776-4e8b-cbb1-ee49afe9ccdd"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"c59ce9cb-5c4a-4635-b2b9-fdadf566039a\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"c59ce9cb-5c4a-4635-b2b9-fdadf566039a\")) {                    Plotly.newPlot(                        \"c59ce9cb-5c4a-4635-b2b9-fdadf566039a\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"ChestPainType=ATA<br>HeartDisease=%{x}<br>Age=%{y}<extra></extra>\",\"legendgroup\":\"ATA\",\"marker\":{\"color\":\"#636efa\",\"size\":10},\"name\":\"ATA\",\"notched\":false,\"offsetgroup\":\"ATA\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[40,37,45,54,48,58,39,54,43,36,44,49,44,52,53,51,43,32,41,48,54,35,50,45,41,51,49,50,37,32,57,44,52,54,52,53,49,52,43,41,57,34,39,59,38,58,58,54,34,54,43,39,56,42,43,50,39,48,40,41,54,47,42,52,48,29,53,59,51,54,58,50,48,41,42,31,56,35,35,28,55,29,55,41,38,54,39,55,55,43,62,55,55,46,54,54,34,32,45,54,55,53,48,36,47,55,53,74,53,60,56,63,56,62,58,63,55,61,61,54,57,63,62,57,74,48,54,46,66,52,63,45,41,62,58,70,56,62,41,59,50,45,41,42,49,52,34,54,46,45,55,54,55,29,41,44,41,52,44,71,58,49,48,44,56,57,35,58,56,56,55,41,57],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"ChestPainType=NAP<br>HeartDisease=%{x}<br>Age=%{y}<extra></extra>\",\"legendgroup\":\"NAP\",\"marker\":{\"color\":\"#EF553B\",\"size\":10},\"name\":\"NAP\",\"notched\":false,\"offsetgroup\":\"NAP\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[1,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,1,0,0,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,0,0,1,0,1,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[49,54,39,37,42,40,36,53,56,54,52,59,36,58,43,46,55,39,39,49,47,52,42,38,49,58,40,49,37,58,45,46,42,50,56,56,54,48,33,53,40,54,53,36,51,47,47,55,59,51,60,51,51,48,57,59,45,60,38,72,38,53,62,56,56,73,47,61,47,53,56,66,66,60,60,63,63,74,52,55,55,52,61,59,42,55,60,56,69,72,51,55,40,35,63,68,48,45,49,62,62,76,48,62,71,53,58,56,58,54,69,37,74,55,61,61,68,67,56,44,48,51,58,71,57,37,42,44,59,58,49,65,60,57,44,44,47,76,39,42,41,64,44,51,54,49,65,54,54,52,54,46,67,50,58,41,41,50,54,51,53,69,68,46,50,42,53,43,70,48,54,68,60,58,64,37,51,43,63,51,54,57,62,62,47,68,39,51,65,60,51,59,61,64,58,52,53,52,66,39,47,67,38],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"ChestPainType=ASY<br>HeartDisease=%{x}<br>Age=%{y}<extra></extra>\",\"legendgroup\":\"ASY\",\"marker\":{\"color\":\"#00cc96\",\"size\":10},\"name\":\"ASY\",\"notched\":false,\"offsetgroup\":\"ASY\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,1,1,1,1,1,0,0,1,1,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,0,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,0,0,1,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,0,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[48,37,49,38,60,53,54,41,65,48,43,37,41,50,47,52,31,54,52,45,46,45,52,44,52,44,55,32,35,49,63,56,66,65,55,39,48,58,56,65,51,40,40,46,48,50,57,47,33,38,59,46,48,46,56,56,61,54,43,52,50,47,53,39,54,55,56,38,49,44,59,49,50,58,52,43,54,46,52,52,46,41,50,53,46,49,53,50,54,48,47,39,46,51,50,38,37,37,41,41,48,48,54,48,48,45,49,44,48,61,55,46,59,52,54,45,55,52,57,49,42,59,53,65,61,50,57,51,47,60,53,62,51,51,55,58,57,65,60,41,34,53,56,61,68,63,38,62,46,42,59,52,60,56,40,51,63,63,64,43,64,61,52,51,69,59,48,69,36,53,43,56,58,55,46,47,56,64,61,68,57,63,60,66,63,59,61,65,70,50,60,50,43,38,54,61,42,53,55,61,51,70,61,38,57,38,58,52,50,51,65,52,35,57,62,59,62,54,56,54,66,63,44,60,55,65,59,62,57,62,63,46,63,60,58,64,69,51,60,56,54,77,63,64,60,60,58,59,40,61,41,57,63,59,51,62,53,68,53,59,51,61,57,58,65,57,54,75,60,64,58,61,67,62,65,63,69,51,62,75,67,58,60,63,43,65,63,64,61,50,59,55,65,72,50,64,55,63,59,56,74,54,57,54,70,48,66,55,75,64,59,55,57,61,41,71,38,55,56,69,64,72,69,56,62,67,57,69,51,48,69,64,53,67,58,61,64,58,60,57,55,56,57,74,51,62,53,62,46,54,55,58,70,64,65,59,60,63,59,53,57,71,46,53,67,43,47,46,66,59,50,48,61,48,40,62,44,65,42,61,59,51,57,51,61,57,67,45,45,58,35,58,57,50,61,54,54,52,47,66,58,67,49,57,63,48,60,59,55,60,46,56,56,54,57,62,60,63,66,42,64,56,57,64,59,53,52,40,64,55,66,62,58,43,64,50,45,67,62,51,67,56,41,42,56,52,62,54,70,35,58,77,58,60,51,55,58,54,65,63,35,43,61,39,45,52,62,53,43,53,62,60,65,60,54,44,55,43,60,57,67,43,52,58,57,55,61,58,58,44,63,63,59,57,68,57],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"ChestPainType=TA<br>HeartDisease=%{x}<br>Age=%{y}<extra></extra>\",\"legendgroup\":\"TA\",\"marker\":{\"color\":\"#ab63fa\",\"size\":10},\"name\":\"TA\",\"notched\":false,\"offsetgroup\":\"TA\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[0,1,0,1,1,0,0,0,0,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,1],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[43,43,35,34,46,62,57,47,30,55,54,32,62,67,62,67,65,49,62,61,68,74,62,61,64,40,59,60,63,42,59,66,51,56,38,65,69,34,69,52,59,58,52,59,64,45],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"HeartDisease\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Age\"}},\"legend\":{\"title\":{\"text\":\"ChestPainType\"},\"tracegroupgap\":0},\"margin\":{\"t\":60},\"boxmode\":\"group\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('c59ce9cb-5c4a-4635-b2b9-fdadf566039a');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#ouliear present in ASY chest pain\n",
        "fig = px.box(df,\"HeartDisease\",\"Age\", color=\"ChestPainType\")\n",
        "fig.update_traces(marker_size=10)\n",
        "fig.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "DaLtXVpbH5nD",
        "outputId": "e15b3acf-469a-434b-ce57-1068b610009a"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"dc6dc8a6-e071-4890-9208-d23c21465f85\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"dc6dc8a6-e071-4890-9208-d23c21465f85\")) {                    Plotly.newPlot(                        \"dc6dc8a6-e071-4890-9208-d23c21465f85\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Sex=M<br>HeartDisease=%{x}<br>Age=%{y}<extra></extra>\",\"legendgroup\":\"M\",\"marker\":{\"color\":\"#636efa\",\"size\":10},\"name\":\"M\",\"notched\":false,\"offsetgroup\":\"M\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[0,0,0,0,0,1,1,0,1,1,1,1,0,1,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,0,0,0,1,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,1,0,0,1,0,1,1,1,1,0,0,1,1,0,0,0,0,1,0,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,1,1,0,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1,1,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,1,0,1,0,1,0,0,1,1,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1,0,1,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,1,0,0,1,0,0,1,0,1,1,1,1,0,1,1,0,0,0,1,0,1,1,0,1,0,0,1,1,1,0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,0,0,1,1,1,1,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,1,0,1,1,0,1,1,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,0,1,1,1,1,1,0,1,0,0,0,1,1,0,1,1,0,1,0,0,0,1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,1,1,1,0,1,1,1,1,0],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[40,37,54,39,54,37,58,39,49,38,60,36,44,44,40,36,53,52,51,53,56,54,41,32,65,35,52,43,59,37,50,36,41,50,45,31,58,54,52,49,45,46,32,52,44,57,44,52,55,46,32,52,49,55,54,63,52,56,66,65,43,55,39,48,58,43,39,56,41,65,51,40,46,57,34,50,39,57,47,38,38,34,46,58,54,42,38,46,56,56,49,39,54,43,52,50,47,53,39,42,50,54,39,48,40,55,41,56,38,49,44,54,59,49,47,42,46,50,48,58,58,29,40,53,49,52,43,54,59,37,52,51,52,46,58,58,41,53,46,50,48,45,49,42,53,47,46,42,56,50,35,35,28,54,48,56,47,39,54,55,29,46,33,55,50,53,38,41,37,40,41,39,41,55,48,48,55,54,55,48,54,54,48,45,49,44,48,61,62,55,36,46,46,59,47,54,52,34,54,45,55,55,59,51,52,60,49,42,59,53,36,48,53,65,32,61,50,57,51,47,60,55,53,51,55,53,58,57,65,60,41,34,53,74,57,56,61,68,59,63,62,46,42,45,59,52,60,60,56,38,40,51,62,72,63,63,43,64,61,52,51,69,59,48,69,36,53,43,56,58,55,67,46,53,38,53,62,47,56,56,56,61,68,57,63,60,66,63,59,61,47,65,70,50,60,50,43,54,61,42,53,55,61,51,70,61,38,57,38,58,52,61,51,65,52,47,35,57,62,59,53,62,54,56,56,54,63,44,60,55,66,66,65,60,60,60,56,59,62,63,57,62,63,46,63,60,58,64,63,74,52,69,51,60,56,55,54,77,63,55,52,64,60,60,58,59,61,40,61,41,57,63,59,51,59,42,55,62,56,53,68,53,60,62,59,51,61,57,56,58,69,67,58,65,63,55,57,65,54,72,75,49,51,60,58,61,67,62,65,63,69,51,62,55,75,40,67,58,60,63,35,62,43,63,68,65,48,63,64,61,50,59,55,45,65,61,49,72,50,64,55,63,59,56,62,74,54,57,62,76,70,48,48,61,66,68,55,62,71,74,53,58,75,56,58,64,54,54,59,55,57,61,41,71,38,55,56,69,64,72,69,56,62,67,57,69,51,48,69,69,64,57,53,37,67,74,63,58,61,64,58,60,57,55,55,56,57,61,61,74,68,62,53,62,46,62,55,58,62,70,57,64,65,56,59,60,59,53,44,61,46,53,64,40,67,48,43,47,58,57,66,59,50,48,61,59,42,48,40,44,46,59,58,49,44,66,42,52,61,62,57,44,63,57,51,47,61,70,45,45,56,58,35,58,41,57,42,62,59,50,59,54,54,52,47,66,58,67,57,63,48,51,59,41,42,46,56,49,54,57,54,62,52,60,66,42,64,54,56,57,64,59,50,51,54,53,52,40,58,41,55,45,56,38,55,58,43,53,65,69,69,67,34,51,46,67,50,42,41,53,43,56,52,70,54,70,54,35,48,77,68,58,60,51,55,52,58,64,37,59,51,58,29,51,54,44,54,65,57,63,41,52,39,45,52,62,43,47,52,68,39,60,65,60,60,54,44,44,51,59,61,55,64,43,60,58,49,48,52,44,57,67,52,43,52,59,64,57,57,47,35,61,58,58,56,56,67,44,63,41,59,45,68,57,38],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Sex=F<br>HeartDisease=%{x}<br>Age=%{y}<extra></extra>\",\"legendgroup\":\"F\",\"marker\":{\"color\":\"#EF553B\",\"size\":10},\"name\":\"F\",\"notched\":false,\"offsetgroup\":\"F\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[49,48,45,48,37,42,54,43,43,49,53,43,41,48,48,54,54,47,41,52,51,43,50,37,45,44,35,53,49,52,39,40,48,59,49,33,59,35,47,52,58,34,48,54,61,43,56,43,52,46,54,50,41,62,57,31,50,56,30,51,48,37,38,54,43,53,55,51,55,54,47,32,45,57,54,51,55,51,48,47,62,51,38,64,64,73,38,62,50,66,63,64,54,61,51,54,67,74,63,57,71,54,48,46,51,71,37,62,65,65,63,45,41,60,59,51,60,58,44,57,76,67,39,42,41,61,64,50,44,49,60,45,55,60,54,49,56,66,65,54,52,63,46,67,34,41,50,54,64,51,46,66,62,64,50,45,68,62,56,42,62,55,58,54,69,60,43,41,63,35,62,43,58,61,62,53,53,62,51,65,71,58,56,53,66,39,58,55,58,55,63,57,57],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"HeartDisease\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Age\"}},\"legend\":{\"title\":{\"text\":\"Sex\"},\"tracegroupgap\":0},\"margin\":{\"t\":60},\"boxmode\":\"group\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('dc6dc8a6-e071-4890-9208-d23c21465f85');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig = px.box(df,\"HeartDisease\",\"Age\", color=\"Sex\")\n",
        "fig.update_traces(marker_size=10)\n",
        "fig.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "vbc3znBUH5nF",
        "outputId": "3575c2a5-c1dd-44f7-bdc8-28d2b7f588fa"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"174608d4-4c00-40de-99c1-08732b6d39f8\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"174608d4-4c00-40de-99c1-08732b6d39f8\")) {                    Plotly.newPlot(                        \"174608d4-4c00-40de-99c1-08732b6d39f8\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Sex=M<br>HeartDisease=%{x}<br>Age=%{y}<extra></extra>\",\"legendgroup\":\"M\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"M\",\"offsetgroup\":\"M\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[0,0,0,0,0,1,1,0,1,1,1,1,0,1,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,0,0,0,1,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,1,0,0,1,0,1,1,1,1,0,0,1,1,0,0,0,0,1,0,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,1,1,0,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1,1,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,1,0,1,0,1,0,0,1,1,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1,0,1,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,1,0,0,1,0,0,1,0,1,1,1,1,0,1,1,0,0,0,1,0,1,1,0,1,0,0,1,1,1,0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,0,0,1,1,1,1,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,1,0,1,1,0,1,1,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,0,1,1,1,1,1,0,1,0,0,0,1,1,0,1,1,0,1,0,0,0,1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,1,1,1,0,1,1,1,1,0],\"xaxis\":\"x\",\"y\":[40,37,54,39,54,37,58,39,49,38,60,36,44,44,40,36,53,52,51,53,56,54,41,32,65,35,52,43,59,37,50,36,41,50,45,31,58,54,52,49,45,46,32,52,44,57,44,52,55,46,32,52,49,55,54,63,52,56,66,65,43,55,39,48,58,43,39,56,41,65,51,40,46,57,34,50,39,57,47,38,38,34,46,58,54,42,38,46,56,56,49,39,54,43,52,50,47,53,39,42,50,54,39,48,40,55,41,56,38,49,44,54,59,49,47,42,46,50,48,58,58,29,40,53,49,52,43,54,59,37,52,51,52,46,58,58,41,53,46,50,48,45,49,42,53,47,46,42,56,50,35,35,28,54,48,56,47,39,54,55,29,46,33,55,50,53,38,41,37,40,41,39,41,55,48,48,55,54,55,48,54,54,48,45,49,44,48,61,62,55,36,46,46,59,47,54,52,34,54,45,55,55,59,51,52,60,49,42,59,53,36,48,53,65,32,61,50,57,51,47,60,55,53,51,55,53,58,57,65,60,41,34,53,74,57,56,61,68,59,63,62,46,42,45,59,52,60,60,56,38,40,51,62,72,63,63,43,64,61,52,51,69,59,48,69,36,53,43,56,58,55,67,46,53,38,53,62,47,56,56,56,61,68,57,63,60,66,63,59,61,47,65,70,50,60,50,43,54,61,42,53,55,61,51,70,61,38,57,38,58,52,61,51,65,52,47,35,57,62,59,53,62,54,56,56,54,63,44,60,55,66,66,65,60,60,60,56,59,62,63,57,62,63,46,63,60,58,64,63,74,52,69,51,60,56,55,54,77,63,55,52,64,60,60,58,59,61,40,61,41,57,63,59,51,59,42,55,62,56,53,68,53,60,62,59,51,61,57,56,58,69,67,58,65,63,55,57,65,54,72,75,49,51,60,58,61,67,62,65,63,69,51,62,55,75,40,67,58,60,63,35,62,43,63,68,65,48,63,64,61,50,59,55,45,65,61,49,72,50,64,55,63,59,56,62,74,54,57,62,76,70,48,48,61,66,68,55,62,71,74,53,58,75,56,58,64,54,54,59,55,57,61,41,71,38,55,56,69,64,72,69,56,62,67,57,69,51,48,69,69,64,57,53,37,67,74,63,58,61,64,58,60,57,55,55,56,57,61,61,74,68,62,53,62,46,62,55,58,62,70,57,64,65,56,59,60,59,53,44,61,46,53,64,40,67,48,43,47,58,57,66,59,50,48,61,59,42,48,40,44,46,59,58,49,44,66,42,52,61,62,57,44,63,57,51,47,61,70,45,45,56,58,35,58,41,57,42,62,59,50,59,54,54,52,47,66,58,67,57,63,48,51,59,41,42,46,56,49,54,57,54,62,52,60,66,42,64,54,56,57,64,59,50,51,54,53,52,40,58,41,55,45,56,38,55,58,43,53,65,69,69,67,34,51,46,67,50,42,41,53,43,56,52,70,54,70,54,35,48,77,68,58,60,51,55,52,58,64,37,59,51,58,29,51,54,44,54,65,57,63,41,52,39,45,52,62,43,47,52,68,39,60,65,60,60,54,44,44,51,59,61,55,64,43,60,58,49,48,52,44,57,67,52,43,52,59,64,57,57,47,35,61,58,58,56,56,67,44,63,41,59,45,68,57,38],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Sex=F<br>HeartDisease=%{x}<br>Age=%{y}<extra></extra>\",\"legendgroup\":\"F\",\"marker\":{\"color\":\"#EF553B\",\"pattern\":{\"shape\":\"\"}},\"name\":\"F\",\"offsetgroup\":\"F\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1],\"xaxis\":\"x\",\"y\":[49,48,45,48,37,42,54,43,43,49,53,43,41,48,48,54,54,47,41,52,51,43,50,37,45,44,35,53,49,52,39,40,48,59,49,33,59,35,47,52,58,34,48,54,61,43,56,43,52,46,54,50,41,62,57,31,50,56,30,51,48,37,38,54,43,53,55,51,55,54,47,32,45,57,54,51,55,51,48,47,62,51,38,64,64,73,38,62,50,66,63,64,54,61,51,54,67,74,63,57,71,54,48,46,51,71,37,62,65,65,63,45,41,60,59,51,60,58,44,57,76,67,39,42,41,61,64,50,44,49,60,45,55,60,54,49,56,66,65,54,52,63,46,67,34,41,50,54,64,51,46,66,62,64,50,45,68,62,56,42,62,55,58,54,69,60,43,41,63,35,62,43,58,61,62,53,53,62,51,65,71,58,56,53,66,39,58,55,58,55,63,57,57],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"HeartDisease\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Age\"}},\"legend\":{\"title\":{\"text\":\"Sex\"},\"tracegroupgap\":0},\"margin\":{\"t\":60},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('174608d4-4c00-40de-99c1-08732b6d39f8');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig=px.bar(df,'HeartDisease','Age',color='Sex')\n",
        "fig.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j7hw1zyUhaOD"
      },
      "source": [
        "# **3D Ploting**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "zVbfegdUH5nG",
        "outputId": "cafde1e7-e56a-4ef3-824e-b084ae41b19f"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"1f887909-a725-4c9f-8bc0-a40e65897a86\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"1f887909-a725-4c9f-8bc0-a40e65897a86\")) {                    Plotly.newPlot(                        \"1f887909-a725-4c9f-8bc0-a40e65897a86\",                        [{\"hovertemplate\":\"ChestPainType=ATA<br>HeartDisease=0<br>Age=%{x}<br>RestingBP=%{y}<br>MaxHR=%{z}<extra></extra>\",\"legendgroup\":\"ATA, 0\",\"marker\":{\"color\":\"#636efa\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"ATA, 0\",\"scene\":\"scene\",\"showlegend\":true,\"x\":[40,37,45,54,48,39,54,43,44,49,52,53,51,43,32,41,48,54,35,50,45,41,51,49,50,37,32,44,52,54,52,53,49,52,43,41,57,34,39,59,38,58,54,34,54,43,39,42,43,50,39,48,40,41,54,47,42,52,48,29,53,59,51,54,58,50,48,41,42,31,56,35,28,55,29,55,41,38,54,39,55,43,62,55,55,46,54,54,34,32,45,54,55,53,48,36,47,55,53,56,63,56,62,55,61,61,54,63,74,48,54,46,52,63,45,41,70,56,62,41,59,50,45,41,42,49,52,34,46,45,55,54,55,29,41,44,41,52,44,71,49,44,56,35,58,56,56,55,41],\"y\":[140,130,130,110,120,120,120,120,120,124,120,113,125,150,125,110,120,150,150,140,140,130,160,100,110,120,110,130,140,120,160,140,110,120,142,125,140,150,190,130,140,130,120,130,120,120,120,120,120,120,130,100,130,120,160,160,120,140,140,120,140,140,130,160,130,170,130,125,150,100,130,120,130,140,140,120,120,120,140,120,145,120,140,130,122,140,120,160,98,105,180,130,110,120,133,120,140,140,130,126,132,124,131,110,139,140,132,136,120,130,132,101,128,140,130,105,156,120,128,126,140,120,112,110,120,134,134,118,105,128,130,108,135,130,130,120,135,120,130,160,130,120,140,122,125,130,120,132,120],\"z\":[172,98,170,142,120,145,150,165,142,164,118,127,145,154,155,142,148,130,168,170,122,150,170,174,145,130,184,135,138,154,165,142,160,148,138,144,140,168,106,124,150,150,110,190,140,175,146,155,176,160,120,100,150,160,130,174,150,140,118,160,162,150,150,130,110,116,160,180,136,150,100,180,185,150,170,137,170,129,140,160,155,118,152,150,155,165,138,175,150,165,180,155,160,132,156,180,135,150,120,140,130,161,130,180,135,120,141,133,121,180,159,156,184,179,175,168,143,178,140,163,164,162,138,153,162,162,158,192,172,170,155,156,161,202,172,170,132,172,188,162,171,173,153,174,144,163,169,166,182],\"type\":\"scatter3d\"},{\"hovertemplate\":\"ChestPainType=ATA<br>HeartDisease=1<br>Age=%{x}<br>RestingBP=%{y}<br>MaxHR=%{z}<extra></extra>\",\"legendgroup\":\"ATA, 1\",\"marker\":{\"color\":\"#636efa\",\"symbol\":\"diamond\"},\"mode\":\"markers\",\"name\":\"ATA, 1\",\"scene\":\"scene\",\"showlegend\":true,\"x\":[58,36,44,57,58,56,35,55,74,53,60,58,63,57,62,57,66,62,58,54,58,48,57,57],\"y\":[136,120,150,140,180,120,110,160,145,120,160,126,139,180,120,124,160,120,136,192,120,110,154,130],\"z\":[99,160,150,145,110,150,140,143,123,95,157,110,128,120,93,141,120,103,152,195,160,168,164,174],\"type\":\"scatter3d\"},{\"hovertemplate\":\"ChestPainType=NAP<br>HeartDisease=0<br>Age=%{x}<br>RestingBP=%{y}<br>MaxHR=%{z}<extra></extra>\",\"legendgroup\":\"NAP, 0\",\"marker\":{\"color\":\"#EF553B\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"NAP, 0\",\"scene\":\"scene\",\"showlegend\":true,\"x\":[54,39,37,42,40,36,56,52,59,36,43,46,55,39,39,49,52,42,38,58,40,49,37,45,46,42,56,56,54,48,33,53,40,53,36,51,47,55,59,60,51,51,48,45,38,72,56,66,66,60,74,42,40,35,63,45,62,53,54,69,37,55,68,67,44,48,51,71,37,42,44,58,65,60,57,44,44,76,39,42,41,64,44,51,54,65,54,54,52,54,46,67,41,41,50,54,51,53,68,50,42,53,43,48,54,68,60,58,37,51,43,63,51,54,57,62,47,39,51,65,51,59,61,58,52,53,52,66,39,47,38],\"y\":[150,120,130,115,130,130,130,140,130,112,150,150,110,110,160,130,125,120,145,140,140,140,130,135,120,160,130,130,120,120,120,120,130,120,150,150,130,120,180,120,130,110,110,110,100,160,120,110,120,180,138,134,106,123,130,130,120,155,133,142,118,133,134,115,140,130,120,110,120,130,130,140,140,120,150,120,118,140,94,120,130,140,108,100,135,160,125,160,136,150,142,152,112,112,120,108,130,130,120,129,120,130,130,124,110,118,102,105,130,125,122,135,94,120,150,130,138,140,140,155,110,150,150,120,172,128,138,146,138,130,138],\"z\":[122,170,142,137,138,178,114,170,120,184,175,116,160,180,160,135,139,152,130,160,188,172,150,110,150,146,128,164,137,125,185,140,167,130,172,120,145,134,100,135,160,120,138,138,179,114,97,99,120,140,116,160,80,153,160,144,86,160,137,126,165,136,151,160,180,139,157,130,170,150,179,165,157,96,173,169,149,116,179,173,168,133,175,143,170,151,152,163,169,165,160,172,172,179,158,167,149,152,115,163,194,173,162,175,158,151,160,154,187,166,165,172,154,147,174,146,156,182,142,148,123,157,137,172,162,115,169,152,152,179,173],\"type\":\"scatter3d\"},{\"hovertemplate\":\"ChestPainType=NAP<br>HeartDisease=1<br>Age=%{x}<br>RestingBP=%{y}<br>MaxHR=%{z}<extra></extra>\",\"legendgroup\":\"NAP, 1\",\"marker\":{\"color\":\"#EF553B\",\"symbol\":\"diamond\"},\"mode\":\"markers\",\"name\":\"NAP, 1\",\"scene\":\"scene\",\"showlegend\":true,\"x\":[49,53,54,58,47,49,58,50,54,47,51,57,59,60,38,53,62,56,73,47,61,47,53,56,60,63,63,52,55,55,52,61,59,55,60,56,69,72,51,55,68,48,49,62,62,76,48,71,58,56,58,74,61,61,56,58,57,59,49,47,49,50,58,69,46,70,64,62,68,60,64,67],\"y\":[160,145,130,130,135,115,160,140,120,140,135,105,125,115,115,105,160,155,160,155,200,110,160,125,120,133,130,128,136,0,122,120,131,120,141,170,140,120,137,136,150,102,131,133,138,104,132,144,150,137,137,140,140,120,130,112,128,126,118,108,120,140,132,140,150,160,125,130,180,140,140,152],\"z\":[156,130,100,140,170,175,92,140,150,145,150,148,175,143,128,115,72,99,121,118,70,120,122,98,141,120,111,180,124,155,110,80,128,125,122,123,118,102,127,131,132,110,127,119,122,120,162,108,118,122,124,94,123,98,142,165,150,134,126,152,139,163,173,146,147,112,131,97,150,155,158,150],\"type\":\"scatter3d\"},{\"hovertemplate\":\"ChestPainType=ASY<br>HeartDisease=0<br>Age=%{x}<br>RestingBP=%{y}<br>MaxHR=%{z}<extra></extra>\",\"legendgroup\":\"ASY, 0\",\"marker\":{\"color\":\"#00cc96\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"ASY, 0\",\"scene\":\"scene\",\"showlegend\":true,\"x\":[53,48,37,52,54,45,45,44,44,35,55,39,56,51,48,50,47,46,48,61,53,39,55,49,58,46,46,50,46,49,50,37,37,41,61,45,57,42,59,53,65,53,44,62,63,60,60,59,41,51,51,58,51,60,64,55,57,48,75,59,41,58,57,51,58,64,65,59,53,57,71,43,47,46,66,48,62,51,57,67,45,57,66,49,42,57,59,64,43,64,50,45,42,52,62,54,58,35,45,53,53,43,57,58],\"y\":[124,150,120,130,150,140,132,150,120,140,140,130,120,130,120,140,140,110,108,130,140,110,120,140,135,130,110,120,180,120,150,130,130,112,125,120,180,140,140,130,155,80,130,120,126,152,120,154,104,128,132,132,132,136,130,150,110,132,160,140,150,100,130,114,140,128,120,135,142,128,112,115,112,138,160,122,124,140,120,106,104,110,120,130,140,132,138,130,110,180,110,138,102,108,140,140,100,138,115,138,130,150,140,130],\"z\":[112,130,168,140,134,144,144,170,115,150,110,140,140,100,110,135,125,140,175,120,155,132,140,130,100,90,140,110,120,132,140,184,158,142,115,140,126,170,140,148,154,141,127,86,120,118,133,131,111,107,139,69,138,126,128,150,100,139,112,154,128,110,96,96,135,105,140,161,111,159,125,181,143,152,138,186,163,186,163,142,148,126,151,163,178,168,182,122,161,154,159,152,122,147,157,160,122,182,185,160,143,171,148,131],\"type\":\"scatter3d\"},{\"hovertemplate\":\"ChestPainType=ASY<br>HeartDisease=1<br>Age=%{x}<br>RestingBP=%{y}<br>MaxHR=%{z}<extra></extra>\",\"legendgroup\":\"ASY, 1\",\"marker\":{\"color\":\"#00cc96\",\"symbol\":\"diamond\"},\"mode\":\"markers\",\"name\":\"ASY, 1\",\"scene\":\"scene\",\"showlegend\":true,\"x\":[48,37,49,38,60,54,41,65,43,41,50,47,31,52,46,52,52,55,32,49,63,56,66,65,48,58,65,40,40,46,57,33,38,59,46,56,56,54,43,52,50,47,54,56,38,44,59,49,50,52,43,54,52,52,41,53,53,54,48,47,39,46,51,50,38,41,48,48,54,48,48,45,49,44,48,55,46,59,52,54,55,52,49,65,61,50,57,51,47,60,53,62,51,51,55,58,57,60,41,34,56,61,68,63,38,62,46,42,59,52,60,56,40,51,63,63,64,43,64,61,52,51,69,59,48,69,36,53,43,56,58,55,46,47,56,64,61,68,57,63,60,66,63,59,61,65,70,50,60,50,43,38,54,61,42,53,55,61,51,70,61,38,57,38,58,52,50,51,65,52,35,57,62,59,62,54,56,54,66,63,60,55,65,59,62,57,63,46,58,64,69,51,60,56,54,77,63,64,60,58,40,61,57,63,59,62,53,68,53,59,61,57,58,65,57,54,75,60,64,61,67,62,65,63,69,62,75,67,58,63,43,65,63,61,50,59,65,72,50,64,55,63,59,56,74,54,54,70,66,55,64,55,57,61,71,38,55,56,69,64,72,69,56,62,67,57,69,51,48,69,64,53,67,61,64,58,60,57,55,56,74,62,53,62,46,54,55,70,59,60,63,46,53,67,59,50,48,61,40,44,65,42,61,59,51,57,61,45,58,35,58,50,61,54,54,52,47,58,67,57,63,48,60,59,55,60,46,56,56,54,57,62,60,63,66,64,56,64,53,52,40,55,66,62,58,67,62,51,67,56,41,56,70,35,77,58,60,51,55,58,54,65,63,43,61,39,52,62,43,62,60,65,60,54,44,55,60,67,43,52,57,55,61,58,58,44,63,63,59,57,68,57],\"y\":[138,140,140,110,100,125,130,140,120,110,130,120,120,112,120,160,120,140,118,130,150,150,140,170,160,130,130,150,120,118,150,100,120,130,110,170,150,140,150,160,140,160,130,155,110,130,140,128,140,140,140,140,130,140,120,180,120,125,106,150,110,130,160,145,92,120,160,160,200,160,122,130,130,135,120,145,120,130,130,130,140,170,150,115,105,145,110,110,110,160,125,120,95,120,115,115,95,125,125,115,140,130,145,100,105,115,100,105,125,95,130,115,95,130,150,140,95,100,110,110,130,120,135,120,115,137,110,120,140,120,130,120,115,160,120,200,150,135,140,150,135,150,185,135,125,160,140,120,160,115,115,110,120,150,145,130,140,160,140,115,130,150,160,135,170,165,160,130,145,135,120,140,115,110,150,180,125,130,155,140,132,142,150,140,110,128,170,110,116,120,130,128,130,120,130,124,160,144,140,136,125,134,139,136,122,152,126,138,154,178,110,130,120,134,140,136,170,142,142,146,160,135,136,130,140,158,136,120,110,160,122,150,96,120,144,124,144,143,133,143,116,110,125,130,150,130,138,170,112,172,134,135,144,141,130,110,158,128,140,150,160,142,137,139,146,156,145,131,140,122,141,124,140,190,130,160,130,122,120,130,155,160,144,158,134,127,122,130,110,140,150,140,140,120,170,144,130,140,152,110,150,136,138,174,130,150,120,142,146,120,150,150,130,124,110,125,110,100,120,165,130,124,150,140,180,158,120,200,130,122,152,120,117,108,112,120,125,145,123,112,110,140,178,150,128,100,138,140,125,134,110,132,145,126,125,125,125,140,160,128,110,135,130,132,145,118,128,160,120,140,130,110,145,120,112,132,130,160,132,128,110,128,148,114,170,120,140,124,164,140,144,130],\"z\":[108,130,140,166,125,122,130,87,120,170,121,98,153,96,125,82,150,128,130,170,115,125,94,112,92,140,115,130,152,124,92,150,170,130,150,122,124,118,130,94,125,158,125,150,150,100,119,96,140,134,135,105,120,124,138,120,116,140,110,98,150,112,150,150,134,118,99,102,142,103,150,130,120,135,115,96,115,125,110,91,130,126,122,93,110,139,131,92,149,149,120,123,126,127,155,138,182,110,176,154,121,77,136,109,166,128,133,128,119,82,130,82,144,170,154,149,145,122,114,113,120,104,130,115,128,104,125,120,140,100,100,92,113,124,148,140,117,120,120,86,63,108,98,115,105,122,157,156,99,120,145,156,155,105,99,135,83,145,60,92,115,120,98,150,105,122,110,163,67,128,130,100,72,94,78,150,103,110,90,112,140,149,105,117,120,148,84,125,124,106,129,125,140,120,117,110,105,122,118,123,165,86,118,84,117,97,106,130,140,120,108,148,106,112,144,140,108,110,140,148,130,130,140,138,140,112,112,150,110,88,120,120,121,135,120,117,113,109,128,115,102,140,135,122,130,112,105,129,140,73,102,126,160,115,115,105,110,119,109,135,130,112,126,120,110,119,110,130,159,84,116,122,122,150,130,113,140,100,127,98,112,108,128,138,126,154,100,109,142,170,154,120,155,129,140,126,150,138,181,177,114,125,125,143,142,112,140,147,105,130,111,128,169,109,108,168,118,156,71,124,147,166,157,162,117,161,144,133,103,116,88,99,160,169,132,96,144,132,95,160,114,111,165,154,130,125,106,122,163,150,158,105,125,156,162,171,141,173,145,131,126,127,132,136,146,140,161,145,120,160,144,158,142,113,153,132,132,108,143,156,143,130,161,140,146,144,144,136,90,123,141,115],\"type\":\"scatter3d\"},{\"hovertemplate\":\"ChestPainType=TA<br>HeartDisease=0<br>Age=%{x}<br>RestingBP=%{y}<br>MaxHR=%{z}<extra></extra>\",\"legendgroup\":\"TA, 0\",\"marker\":{\"color\":\"#ab63fa\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"TA, 0\",\"scene\":\"scene\",\"showlegend\":true,\"x\":[43,35,62,57,47,30,54,65,68,62,64,40,60,63,42,59,66,51,56,69,34,69,52,58,52,64],\"y\":[100,120,160,130,110,170,120,140,139,135,110,140,150,145,148,178,150,125,120,160,118,140,152,150,118,170],\"z\":[142,185,116,98,150,170,137,135,135,137,144,178,171,150,178,145,114,125,162,131,174,151,178,162,190,155],\"type\":\"scatter3d\"},{\"hovertemplate\":\"ChestPainType=TA<br>HeartDisease=1<br>Age=%{x}<br>RestingBP=%{y}<br>MaxHR=%{z}<extra></extra>\",\"legendgroup\":\"TA, 1\",\"marker\":{\"color\":\"#ab63fa\",\"symbol\":\"diamond\"},\"mode\":\"markers\",\"name\":\"TA, 1\",\"scene\":\"scene\",\"showlegend\":true,\"x\":[43,34,46,55,32,62,67,62,67,49,62,61,74,61,59,38,65,59,59,45],\"y\":[120,140,140,140,95,120,145,140,142,130,112,142,145,134,160,120,138,170,134,110],\"z\":[155,180,175,136,127,134,125,143,125,145,150,100,116,145,125,182,174,159,162,132],\"type\":\"scatter3d\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"scene\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"xaxis\":{\"title\":{\"text\":\"Age\"}},\"yaxis\":{\"title\":{\"text\":\"RestingBP\"}},\"zaxis\":{\"title\":{\"text\":\"MaxHR\"}}},\"legend\":{\"title\":{\"text\":\"ChestPainType, HeartDisease\"},\"tracegroupgap\":0},\"margin\":{\"t\":60}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('1f887909-a725-4c9f-8bc0-a40e65897a86');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#we can see that if MaxHr is low and RestingPB is High then more chance of HeartDiease\n",
        "fig = px.scatter_3d(df, x='Age', y='RestingBP', z='MaxHR',\n",
        "              color='ChestPainType',symbol='HeartDisease')\n",
        "fig.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "pl8Car9hH5nN",
        "outputId": "f1ad3cf6-dc0e-42f4-baba-806a17a23fd0"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"d4e9303b-f3ae-4061-a117-36974271f456\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d4e9303b-f3ae-4061-a117-36974271f456\")) {                    Plotly.newPlot(                        \"d4e9303b-f3ae-4061-a117-36974271f456\",                        [{\"hovertemplate\":\"ChestPainType=ATA<br>HeartDisease=0<br>Cholesterol=%{x}<br>RestingBP=%{y}<br>MaxHR=%{z}<extra></extra>\",\"legendgroup\":\"ATA, 0\",\"marker\":{\"color\":\"#636efa\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"ATA, 0\",\"scene\":\"scene\",\"showlegend\":true,\"x\":[289,283,237,208,284,204,273,201,184,201,284,468,188,186,254,250,177,230,264,216,224,245,194,253,202,260,225,215,100,238,196,216,208,210,207,269,260,214,241,188,297,230,246,161,230,215,241,198,249,168,215,159,275,291,195,263,196,225,238,243,320,287,224,312,251,209,245,184,268,219,184,308,132,196,263,256,295,275,309,200,326,266,271,394,320,275,221,305,220,198,295,253,344,181,308,166,257,0,0,166,0,224,0,214,283,298,182,165,269,245,288,197,205,195,234,198,245,236,208,306,221,244,160,235,295,271,201,210,204,308,262,309,250,204,204,220,203,325,219,302,266,263,294,192,220,221,240,342,157],\"y\":[140,130,130,110,120,120,120,120,120,124,120,113,125,150,125,110,120,150,150,140,140,130,160,100,110,120,110,130,140,120,160,140,110,120,142,125,140,150,190,130,140,130,120,130,120,120,120,120,120,120,130,100,130,120,160,160,120,140,140,120,140,140,130,160,130,170,130,125,150,100,130,120,130,140,140,120,120,120,140,120,145,120,140,130,122,140,120,160,98,105,180,130,110,120,133,120,140,140,130,126,132,124,131,110,139,140,132,136,120,130,132,101,128,140,130,105,156,120,128,126,140,120,112,110,120,134,134,118,105,128,130,108,135,130,130,120,135,120,130,160,130,120,140,122,125,130,120,132,120],\"z\":[172,98,170,142,120,145,150,165,142,164,118,127,145,154,155,142,148,130,168,170,122,150,170,174,145,130,184,135,138,154,165,142,160,148,138,144,140,168,106,124,150,150,110,190,140,175,146,155,176,160,120,100,150,160,130,174,150,140,118,160,162,150,150,130,110,116,160,180,136,150,100,180,185,150,170,137,170,129,140,160,155,118,152,150,155,165,138,175,150,165,180,155,160,132,156,180,135,150,120,140,130,161,130,180,135,120,141,133,121,180,159,156,184,179,175,168,143,178,140,163,164,162,138,153,162,162,158,192,172,170,155,156,161,202,172,170,132,172,188,162,171,173,153,174,144,163,169,166,182],\"type\":\"scatter3d\"},{\"hovertemplate\":\"ChestPainType=ATA<br>HeartDisease=1<br>Cholesterol=%{x}<br>RestingBP=%{y}<br>MaxHR=%{z}<extra></extra>\",\"legendgroup\":\"ATA, 1\",\"marker\":{\"color\":\"#636efa\",\"symbol\":\"diamond\"},\"mode\":\"markers\",\"name\":\"ATA, 1\",\"scene\":\"scene\",\"showlegend\":true,\"x\":[164,267,288,265,393,279,257,292,0,0,267,0,217,285,254,261,246,281,319,283,284,229,232,236],\"y\":[136,120,150,140,180,120,110,160,145,120,160,126,139,180,120,124,160,120,136,192,120,110,154,130],\"z\":[99,160,150,145,110,150,140,143,123,95,157,110,128,120,93,141,120,103,152,195,160,168,164,174],\"type\":\"scatter3d\"},{\"hovertemplate\":\"ChestPainType=NAP<br>HeartDisease=0<br>Cholesterol=%{x}<br>RestingBP=%{y}<br>MaxHR=%{z}<extra></extra>\",\"legendgroup\":\"NAP, 0\",\"marker\":{\"color\":\"#EF553B\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"NAP, 0\",\"scene\":\"scene\",\"showlegend\":true,\"x\":[195,339,211,211,215,209,167,259,318,340,254,163,277,182,147,207,272,228,292,179,235,187,194,192,230,147,276,219,217,195,298,195,281,274,160,200,235,220,213,246,220,190,211,0,0,0,0,213,0,0,0,240,240,161,0,236,220,175,203,271,240,185,254,564,235,275,295,265,215,180,233,211,417,178,126,226,242,197,199,209,214,313,141,222,304,360,273,201,196,232,177,277,268,250,219,267,256,197,211,196,240,246,315,255,214,277,318,240,250,245,213,252,227,258,168,231,257,321,308,269,175,212,243,340,199,216,223,278,220,253,175],\"y\":[150,120,130,115,130,130,130,140,130,112,150,150,110,110,160,130,125,120,145,140,140,140,130,135,120,160,130,130,120,120,120,120,130,120,150,150,130,120,180,120,130,110,110,110,100,160,120,110,120,180,138,134,106,123,130,130,120,155,133,142,118,133,134,115,140,130,120,110,120,130,130,140,140,120,150,120,118,140,94,120,130,140,108,100,135,160,125,160,136,150,142,152,112,112,120,108,130,130,120,129,120,130,130,124,110,118,102,105,130,125,122,135,94,120,150,130,138,140,140,155,110,150,150,120,172,128,138,146,138,130,138],\"z\":[122,170,142,137,138,178,114,170,120,184,175,116,160,180,160,135,139,152,130,160,188,172,150,110,150,146,128,164,137,125,185,140,167,130,172,120,145,134,100,135,160,120,138,138,179,114,97,99,120,140,116,160,80,153,160,144,86,160,137,126,165,136,151,160,180,139,157,130,170,150,179,165,157,96,173,169,149,116,179,173,168,133,175,143,170,151,152,163,169,165,160,172,172,179,158,167,149,152,115,163,194,173,162,175,158,151,160,154,187,166,165,172,154,147,174,146,156,182,142,148,123,157,137,172,162,115,169,152,152,179,173],\"type\":\"scatter3d\"},{\"hovertemplate\":\"ChestPainType=NAP<br>HeartDisease=1<br>Cholesterol=%{x}<br>RestingBP=%{y}<br>MaxHR=%{z}<extra></extra>\",\"legendgroup\":\"NAP, 1\",\"marker\":{\"color\":\"#EF553B\",\"symbol\":\"diamond\"},\"mode\":\"markers\",\"name\":\"NAP, 1\",\"scene\":\"scene\",\"showlegend\":true,\"x\":[180,518,294,213,248,265,211,288,237,193,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,0,0,0,0,0,316,0,0,214,339,245,195,0,142,0,204,113,220,221,219,208,232,237,284,337,256,230,229,218,149,243,188,233,224,254,231,269,309,263,274,185,335,212],\"y\":[160,145,130,130,135,115,160,140,120,140,135,105,125,115,115,105,160,155,160,155,200,110,160,125,120,133,130,128,136,0,122,120,131,120,141,170,140,120,137,136,150,102,131,133,138,104,132,144,150,137,137,140,140,120,130,112,128,126,118,108,120,140,132,140,150,160,125,130,180,140,140,152],\"z\":[156,130,100,140,170,175,92,140,150,145,150,148,175,143,128,115,72,99,121,118,70,120,122,98,141,120,111,180,124,155,110,80,128,125,122,123,118,102,127,131,132,110,127,119,122,120,162,108,118,122,124,94,123,98,142,165,150,134,126,152,139,163,173,146,147,112,131,97,150,155,158,150],\"type\":\"scatter3d\"},{\"hovertemplate\":\"ChestPainType=ASY<br>HeartDisease=0<br>Cholesterol=%{x}<br>RestingBP=%{y}<br>MaxHR=%{z}<extra></extra>\",\"legendgroup\":\"ASY, 0\",\"marker\":{\"color\":\"#00cc96\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"ASY, 0\",\"scene\":\"scene\",\"showlegend\":true,\"x\":[260,227,223,180,365,224,297,412,218,167,229,307,85,179,254,129,276,240,163,294,243,273,270,185,222,238,238,328,280,297,215,173,315,250,292,225,347,358,169,182,0,0,209,220,0,0,0,0,0,0,218,458,227,195,223,160,197,272,310,274,171,213,207,258,385,263,177,234,226,303,149,303,204,243,228,222,209,261,354,223,208,201,302,269,226,207,271,303,211,325,254,236,265,233,394,239,248,183,260,234,264,247,192,197],\"y\":[124,150,120,130,150,140,132,150,120,140,140,130,120,130,120,140,140,110,108,130,140,110,120,140,135,130,110,120,180,120,150,130,130,112,125,120,180,140,140,130,155,80,130,120,126,152,120,154,104,128,132,132,132,136,130,150,110,132,160,140,150,100,130,114,140,128,120,135,142,128,112,115,112,138,160,122,124,140,120,106,104,110,120,130,140,132,138,130,110,180,110,138,102,108,140,140,100,138,115,138,130,150,140,130],\"z\":[112,130,168,140,134,144,144,170,115,150,110,140,140,100,110,135,125,140,175,120,155,132,140,130,100,90,140,110,120,132,140,184,158,142,115,140,126,170,140,148,154,141,127,86,120,118,133,131,111,107,139,69,138,126,128,150,100,139,112,154,128,110,96,96,135,105,140,161,111,159,125,181,143,152,138,186,163,186,163,142,148,126,151,163,178,168,182,122,161,154,159,152,122,147,157,160,122,182,185,160,143,171,148,131],\"type\":\"scatter3d\"},{\"hovertemplate\":\"ChestPainType=ASY<br>HeartDisease=1<br>Cholesterol=%{x}<br>RestingBP=%{y}<br>MaxHR=%{z}<extra></extra>\",\"legendgroup\":\"ASY, 1\",\"marker\":{\"color\":\"#00cc96\",\"symbol\":\"diamond\"},\"mode\":\"markers\",\"name\":\"ASY, 1\",\"scene\":\"scene\",\"showlegend\":true,\"x\":[214,207,234,196,248,224,172,306,175,289,233,205,270,342,277,246,182,268,529,206,223,213,139,263,329,263,275,392,466,186,255,246,282,338,202,388,230,166,247,331,341,291,603,342,190,290,264,212,231,266,288,216,225,404,237,285,246,216,263,226,280,222,303,264,117,336,355,193,198,268,275,219,341,491,260,248,231,126,298,242,201,223,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,260,218,228,236,0,0,0,177,236,0,0,0,0,186,100,0,171,230,0,281,203,0,0,277,0,233,153,0,0,0,0,0,311,0,0,214,220,203,216,276,241,384,297,248,308,208,210,225,0,198,267,0,235,305,282,349,160,312,211,218,306,186,252,222,0,258,202,274,192,261,260,273,204,270,292,221,289,217,223,110,193,123,210,282,170,369,173,289,152,208,216,244,243,219,287,258,256,186,264,226,203,310,254,300,170,310,333,223,322,239,293,407,311,203,229,326,200,256,207,223,197,225,315,166,249,305,276,260,309,218,198,270,243,330,266,206,212,275,234,237,289,254,274,258,177,327,305,249,288,283,286,274,267,230,269,212,246,249,212,282,230,167,217,228,244,259,299,294,298,254,409,172,184,174,282,304,300,258,299,289,216,239,254,330,341,307,219,255,164,177,268,253,248,282,188,290,353,206,286,247,204,335,205,203,318,225,169,187,197,176,241,193,131],\"y\":[138,140,140,110,100,125,130,140,120,110,130,120,120,112,120,160,120,140,118,130,150,150,140,170,160,130,130,150,120,118,150,100,120,130,110,170,150,140,150,160,140,160,130,155,110,130,140,128,140,140,140,140,130,140,120,180,120,125,106,150,110,130,160,145,92,120,160,160,200,160,122,130,130,135,120,145,120,130,130,130,140,170,150,115,105,145,110,110,110,160,125,120,95,120,115,115,95,125,125,115,140,130,145,100,105,115,100,105,125,95,130,115,95,130,150,140,95,100,110,110,130,120,135,120,115,137,110,120,140,120,130,120,115,160,120,200,150,135,140,150,135,150,185,135,125,160,140,120,160,115,115,110,120,150,145,130,140,160,140,115,130,150,160,135,170,165,160,130,145,135,120,140,115,110,150,180,125,130,155,140,132,142,150,140,110,128,170,110,116,120,130,128,130,120,130,124,160,144,140,136,125,134,139,136,122,152,126,138,154,178,110,130,120,134,140,136,170,142,142,146,160,135,136,130,140,158,136,120,110,160,122,150,96,120,144,124,144,143,133,143,116,110,125,130,150,130,138,170,112,172,134,135,144,141,130,110,158,128,140,150,160,142,137,139,146,156,145,131,140,122,141,124,140,190,130,160,130,122,120,130,155,160,144,158,134,127,122,130,110,140,150,140,140,120,170,144,130,140,152,110,150,136,138,174,130,150,120,142,146,120,150,150,130,124,110,125,110,100,120,165,130,124,150,140,180,158,120,200,130,122,152,120,117,108,112,120,125,145,123,112,110,140,178,150,128,100,138,140,125,134,110,132,145,126,125,125,125,140,160,128,110,135,130,132,145,118,128,160,120,140,130,110,145,120,112,132,130,160,132,128,110,128,148,114,170,120,140,124,164,140,144,130],\"z\":[108,130,140,166,125,122,130,87,120,170,121,98,153,96,125,82,150,128,130,170,115,125,94,112,92,140,115,130,152,124,92,150,170,130,150,122,124,118,130,94,125,158,125,150,150,100,119,96,140,134,135,105,120,124,138,120,116,140,110,98,150,112,150,150,134,118,99,102,142,103,150,130,120,135,115,96,115,125,110,91,130,126,122,93,110,139,131,92,149,149,120,123,126,127,155,138,182,110,176,154,121,77,136,109,166,128,133,128,119,82,130,82,144,170,154,149,145,122,114,113,120,104,130,115,128,104,125,120,140,100,100,92,113,124,148,140,117,120,120,86,63,108,98,115,105,122,157,156,99,120,145,156,155,105,99,135,83,145,60,92,115,120,98,150,105,122,110,163,67,128,130,100,72,94,78,150,103,110,90,112,140,149,105,117,120,148,84,125,124,106,129,125,140,120,117,110,105,122,118,123,165,86,118,84,117,97,106,130,140,120,108,148,106,112,144,140,108,110,140,148,130,130,140,138,140,112,112,150,110,88,120,120,121,135,120,117,113,109,128,115,102,140,135,122,130,112,105,129,140,73,102,126,160,115,115,105,110,119,109,135,130,112,126,120,110,119,110,130,159,84,116,122,122,150,130,113,140,100,127,98,112,108,128,138,126,154,100,109,142,170,154,120,155,129,140,126,150,138,181,177,114,125,125,143,142,112,140,147,105,130,111,128,169,109,108,168,118,156,71,124,147,166,157,162,117,161,144,133,103,116,88,99,160,169,132,96,144,132,95,160,114,111,165,154,130,125,106,122,163,150,158,105,125,156,162,171,141,173,145,131,126,127,132,136,146,140,161,145,120,160,144,158,142,113,153,132,132,108,143,156,143,130,161,140,146,144,144,136,90,123,141,115],\"type\":\"scatter3d\"},{\"hovertemplate\":\"ChestPainType=TA<br>HeartDisease=0<br>Cholesterol=%{x}<br>RestingBP=%{y}<br>MaxHR=%{z}<extra></extra>\",\"legendgroup\":\"TA, 0\",\"marker\":{\"color\":\"#ab63fa\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"TA, 0\",\"scene\":\"scene\",\"showlegend\":true,\"x\":[223,160,193,308,249,237,171,252,181,139,211,199,240,233,244,270,226,213,193,234,182,239,298,283,186,227],\"y\":[100,120,160,130,110,170,120,140,139,135,110,140,150,145,148,178,150,125,120,160,118,140,152,150,118,170],\"z\":[142,185,116,98,150,170,137,135,135,137,144,178,171,150,178,145,114,125,162,131,174,151,178,162,190,155],\"type\":\"scatter3d\"},{\"hovertemplate\":\"ChestPainType=TA<br>HeartDisease=1<br>Cholesterol=%{x}<br>RestingBP=%{y}<br>MaxHR=%{z}<extra></extra>\",\"legendgroup\":\"TA, 1\",\"marker\":{\"color\":\"#ab63fa\",\"symbol\":\"diamond\"},\"mode\":\"markers\",\"name\":\"TA, 1\",\"scene\":\"scene\",\"showlegend\":true,\"x\":[291,156,272,295,0,0,0,0,270,0,258,200,216,234,273,231,282,288,204,264],\"y\":[120,140,140,140,95,120,145,140,142,130,112,142,145,134,160,120,138,170,134,110],\"z\":[155,180,175,136,127,134,125,143,125,145,150,100,116,145,125,182,174,159,162,132],\"type\":\"scatter3d\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"scene\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"xaxis\":{\"title\":{\"text\":\"Cholesterol\"}},\"yaxis\":{\"title\":{\"text\":\"RestingBP\"}},\"zaxis\":{\"title\":{\"text\":\"MaxHR\"}}},\"legend\":{\"title\":{\"text\":\"ChestPainType, HeartDisease\"},\"tracegroupgap\":0},\"margin\":{\"t\":60}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('d4e9303b-f3ae-4061-a117-36974271f456');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#if chole strol is zero max chance to HeartDieases \n",
        "fig = px.scatter_3d(df, x='Cholesterol', y='RestingBP', z='MaxHR',color='ChestPainType',symbol='HeartDisease')\n",
        "fig.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "G5cWIn42l420",
        "outputId": "43cb5379-a68c-4428-8455-678c92bd918f"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-1069a9af-bc3a-403b-8152-a47607e535a3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Sex</th>\n",
              "      <th>ChestPainType</th>\n",
              "      <th>RestingBP</th>\n",
              "      <th>Cholesterol</th>\n",
              "      <th>FastingBS</th>\n",
              "      <th>RestingECG</th>\n",
              "      <th>MaxHR</th>\n",
              "      <th>ExerciseAngina</th>\n",
              "      <th>Oldpeak</th>\n",
              "      <th>ST_Slope</th>\n",
              "      <th>HeartDisease</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>40</td>\n",
              "      <td>M</td>\n",
              "      <td>ATA</td>\n",
              "      <td>140</td>\n",
              "      <td>289</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>172</td>\n",
              "      <td>N</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Up</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>49</td>\n",
              "      <td>F</td>\n",
              "      <td>NAP</td>\n",
              "      <td>160</td>\n",
              "      <td>180</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>156</td>\n",
              "      <td>N</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Flat</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>37</td>\n",
              "      <td>M</td>\n",
              "      <td>ATA</td>\n",
              "      <td>130</td>\n",
              "      <td>283</td>\n",
              "      <td>0</td>\n",
              "      <td>ST</td>\n",
              "      <td>98</td>\n",
              "      <td>N</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Up</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>48</td>\n",
              "      <td>F</td>\n",
              "      <td>ASY</td>\n",
              "      <td>138</td>\n",
              "      <td>214</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>108</td>\n",
              "      <td>Y</td>\n",
              "      <td>1.5</td>\n",
              "      <td>Flat</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>54</td>\n",
              "      <td>M</td>\n",
              "      <td>NAP</td>\n",
              "      <td>150</td>\n",
              "      <td>195</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>122</td>\n",
              "      <td>N</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Up</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1069a9af-bc3a-403b-8152-a47607e535a3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1069a9af-bc3a-403b-8152-a47607e535a3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1069a9af-bc3a-403b-8152-a47607e535a3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   Age Sex ChestPainType  RestingBP  Cholesterol  FastingBS RestingECG  MaxHR  \\\n",
              "0   40   M           ATA        140          289          0     Normal    172   \n",
              "1   49   F           NAP        160          180          0     Normal    156   \n",
              "2   37   M           ATA        130          283          0         ST     98   \n",
              "3   48   F           ASY        138          214          0     Normal    108   \n",
              "4   54   M           NAP        150          195          0     Normal    122   \n",
              "\n",
              "  ExerciseAngina  Oldpeak ST_Slope  HeartDisease  \n",
              "0              N      0.0       Up             0  \n",
              "1              N      1.0     Flat             1  \n",
              "2              N      0.0       Up             0  \n",
              "3              Y      1.5     Flat             1  \n",
              "4              N      0.0       Up             0  "
            ]
          },
          "execution_count": 25,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SITytNIGmotY"
      },
      "source": [
        "# **Feature Enineering**\n",
        "**Sex, ChestPainType, RestingECG, ExcerciseAngina, ST_Slop** is Object type and categorical"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "szQ4IXpSnc8o"
      },
      "outputs": [],
      "source": [
        "X=df.iloc[:,:-1]\n",
        "y=df.iloc[:,-1]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "e0g-JvkOnjtA"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import OneHotEncoder,OrdinalEncoder,LabelEncoder,StandardScaler,MinMaxScaler\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.decomposition import PCA"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "MNaEVL1BYdvc"
      },
      "outputs": [],
      "source": [
        "x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "AjuM1wAcqQyB"
      },
      "outputs": [],
      "source": [
        "CT=ColumnTransformer(transformers=[('ohe',OneHotEncoder(sparse=True,drop='first'),['Sex','ExerciseAngina','ChestPainType','RestingECG','ST_Slope']),\n",
        "                                   ('scaler',StandardScaler(),['Age','RestingBP','Cholesterol','MaxHR']),                  \n",
        "],remainder='passthrough')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "DENykMCrrxqq"
      },
      "outputs": [],
      "source": [
        "x_train_trf=CT.fit_transform(x_train)\n",
        "x_test_trf=CT.fit_transform(x_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "uzhB6SqxWvFR"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HjK98K0AvITB"
      },
      "source": [
        "# ***Modling***"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "QjBAA2r_vM7y"
      },
      "outputs": [],
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier,plot_tree\n",
        "from sklearn.ensemble import RandomForestClassifier,BaggingClassifier,AdaBoostClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.metrics import accuracy_score,r2_score,confusion_matrix\n",
        "from sklearn.model_selection import cross_val_score"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MSfPT_jqZSSQ"
      },
      "source": [
        "**1.Logistic Regression**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "enc6QdbHsuLw",
        "outputId": "3b8647fd-b770-4429-e1d0-fc9814581e79"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.8532608695652174"
            ]
          },
          "execution_count": 32,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "LR=LogisticRegression()\n",
        "LR.fit(x_train_trf,y_train)\n",
        "LR_pred=LR.predict(x_test_trf)\n",
        "LR_score=accuracy_score(LR_pred,y_test)\n",
        "LR_score"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tzhXSliEwL4f"
      },
      "source": [
        "**2.Decision Tree Classiefier**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "qA2-TSCdaae-",
        "outputId": "8302d0b3-34c1-455c-e1a1-c4bc4b9149d0"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.8097826086956522"
            ]
          },
          "execution_count": 33,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "DT=DecisionTreeClassifier(max_depth=100,min_samples_split=12,min_samples_leaf=6,max_features=9)\n",
        "DT.fit(x_train_trf,y_train)\n",
        "DT_pred=DT.predict(x_test_trf)\n",
        "DT_score=accuracy_score(DT_pred,y_test)\n",
        "DT_score"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v4_HhbxqwW7n"
      },
      "source": [
        "**3.KNN**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "dkxF79xfjclL",
        "outputId": "696e46d9-1052-4428-f713-93f30903cf79"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.8804347826086957"
            ]
          },
          "execution_count": 91,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "knn=KNeighborsClassifier(n_neighbors=5,algorithm='auto',p=1,weights='uniform',n_jobs=-1)\n",
        "knn.fit(x_train_trf,y_train)\n",
        "knn_pred=knn.predict(x_test_trf)\n",
        "knn_score=accuracy_score(knn_pred,y_test)\n",
        "knn_score"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HfhWYFqjwde3"
      },
      "source": [
        "**4.Random Forest**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "Uh6pfakWnAIZ",
        "outputId": "4009dcd0-5aae-40b8-e0dd-24044c6915f9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.8641304347826086"
            ]
          },
          "execution_count": 92,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "RF=RandomForestClassifier(n_estimators=1000,max_depth=100,min_samples_split=10,min_samples_leaf=2,\n",
        "                          max_leaf_nodes=10,bootstrap=True,oob_score=True,max_samples=500,n_jobs=-1)\n",
        "RF.fit(x_train_trf,y_train)\n",
        "RF_pred=RF.predict(x_test_trf)\n",
        "RF_score=accuracy_score(RF_pred,y_test)\n",
        "RF_score"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WrNMR1LCwlU_"
      },
      "source": [
        "**5.ADA Boost**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "V69TXIo5rPX1",
        "outputId": "f7fce53a-2ed0-463f-ff1f-40ee632ff510"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.7934782608695652"
            ]
          },
          "execution_count": 93,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ADA=AdaBoostClassifier()\n",
        "ADA.fit(x_train_trf,y_train)\n",
        "ADA_pred=DT.predict(x_test_trf)\n",
        "ADA_score=accuracy_score(ADA_pred,y_test)\n",
        "ADA_score\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hFlQ3biswpiR"
      },
      "source": [
        "**6.XG boost**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gjgs9gC6uUmw",
        "outputId": "5f080e04-0db5-472c-f4e0-934bc153de62"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.8695652173913043"
            ]
          },
          "execution_count": 94,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "XGB=XGBClassifier()\n",
        "XGB.fit(x_train_trf,y_train)\n",
        "XGB_pred=XGB.predict(x_test_trf)\n",
        "XGB_score=accuracy_score(XGB_pred,y_test)\n",
        "XGB_score"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IZ3ED-3IPu3P"
      },
      "source": [
        "# **Confusion Matrix** \n",
        "**1.LogisticRegression Confusion Matrix**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "3scTfuwnv5r3",
        "outputId": "0bd996e7-7abc-4aea-92cc-b9cceeaaf51c"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-a0c9a5f9-7cef-4605-814f-b8451f7bb1a6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>1</th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>67</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10</td>\n",
              "      <td>90</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a0c9a5f9-7cef-4605-814f-b8451f7bb1a6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a0c9a5f9-7cef-4605-814f-b8451f7bb1a6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a0c9a5f9-7cef-4605-814f-b8451f7bb1a6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "    1   0\n",
              "1  67  17\n",
              "0  10  90"
            ]
          },
          "execution_count": 95,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pd.DataFrame(confusion_matrix(LR_pred,y_test),index=['1','0'],columns=['1','0'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3-u5rVWtSQEn"
      },
      "source": [
        "**2.Decision Tree Confusion Matrix**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "Oy-liKIA2wmI",
        "outputId": "3e4089ea-e37f-4f41-e18e-2a3a1315126f"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-00a602c9-faf8-443f-aae0-555eddbabb4e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>1</th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>67</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10</td>\n",
              "      <td>79</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-00a602c9-faf8-443f-aae0-555eddbabb4e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-00a602c9-faf8-443f-aae0-555eddbabb4e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-00a602c9-faf8-443f-aae0-555eddbabb4e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "    1   0\n",
              "1  67  28\n",
              "0  10  79"
            ]
          },
          "execution_count": 96,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pd.DataFrame(confusion_matrix(DT_pred,y_test),index=['1','0'],columns=['1','0'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z7jos0kKSYR7"
      },
      "source": [
        "**3.Random Forest Confusion Matrix**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "F6tdniYbRnm1",
        "outputId": "87df0ccb-7e6e-4d25-9a8e-32b6d00aad2f"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-719fda84-4441-4ed2-b0c1-dbc9efb51f63\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>1</th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>64</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>13</td>\n",
              "      <td>95</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-719fda84-4441-4ed2-b0c1-dbc9efb51f63')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-719fda84-4441-4ed2-b0c1-dbc9efb51f63 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-719fda84-4441-4ed2-b0c1-dbc9efb51f63');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "    1   0\n",
              "1  64  12\n",
              "0  13  95"
            ]
          },
          "execution_count": 97,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pd.DataFrame(confusion_matrix(RF_pred,y_test),index=['1','0'],columns=['1','0'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RGLNQLeBShMB"
      },
      "source": [
        "**4.knn Confusion Matrix**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "Dj70H9LmR61y",
        "outputId": "0b7a9ef6-0fbc-446a-b38a-18c13886725d"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-e2868af2-9936-44ba-9159-c5110e039abd\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>1</th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>66</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>11</td>\n",
              "      <td>96</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2868af2-9936-44ba-9159-c5110e039abd')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e2868af2-9936-44ba-9159-c5110e039abd button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e2868af2-9936-44ba-9159-c5110e039abd');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "    1   0\n",
              "1  66  11\n",
              "0  11  96"
            ]
          },
          "execution_count": 98,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pd.DataFrame(confusion_matrix(knn_pred,y_test),index=['1','0'],columns=['1','0'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I0I43wASSm5H"
      },
      "source": [
        "**5.ADA boost  Confusion Matrix**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "2iHlnrPuSC2x",
        "outputId": "b2794e6c-7bfb-420b-f0d6-83dc581b4407"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-5818962d-65b2-434b-8def-d2706136c07f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>1</th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>67</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10</td>\n",
              "      <td>79</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5818962d-65b2-434b-8def-d2706136c07f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5818962d-65b2-434b-8def-d2706136c07f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5818962d-65b2-434b-8def-d2706136c07f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "    1   0\n",
              "1  67  28\n",
              "0  10  79"
            ]
          },
          "execution_count": 99,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pd.DataFrame(confusion_matrix(ADA_pred,y_test),index=['1','0'],columns=['1','0'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5DpGEIl6Sr_V"
      },
      "source": [
        "**6.XG boost Confusion Matrix**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "G7RMECh5SHHP",
        "outputId": "7c3cb42c-7307-44ce-9923-f66e5cb2c117"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-3669462d-a783-4b5e-898e-256f1162172c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>1</th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>65</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>12</td>\n",
              "      <td>95</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3669462d-a783-4b5e-898e-256f1162172c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3669462d-a783-4b5e-898e-256f1162172c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3669462d-a783-4b5e-898e-256f1162172c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "    1   0\n",
              "1  65  12\n",
              "0  12  95"
            ]
          },
          "execution_count": 100,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pd.DataFrame(confusion_matrix(XGB_pred,y_test),index=['1','0'],columns=['1','0'])"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "Heart333.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "datalore": {
      "base_environment": "default",
      "computation_mode": "REACTIVE",
      "package_manager": "pip",
      "packages": [],
      "version": 1
    },
    "kernelspec": {
      "display_name": "Python",
      "language": "python",
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}